#BlueJ class context
comment0.params=argument
comment0.target=void\ main(java.lang.String[])
comment0.text=\r\n\ The\ CLI\ for\ Victoria\ Airlines\ operations\ office.\r\n
comment1.params=
comment1.target=void\ help()
comment1.text=\r\n\ Prints\ all\ the\ possible\ commands\ this\ CLI\ can\ handle.\r\n
comment10.params=
comment10.target=Plane[]\ getPlanes()
comment10.text=\r\n\ Returns\ the\ record\ of\ all\ planes\ in\ this\ operations\ office.\r\n\r\n\ @return\ the\ record\ of\ all\ planes\ in\ this\ operations\ office\r\n
comment11.params=customer
comment11.target=void\ setCustomers(Passenger[])
comment11.text=\r\n\ Sets\ the\ customers\ record\ of\ this\ operations\ office.\r\n\r\n\ @param\ customer\ the\ array\ which\ contains\ the\ information\ for\ \r\n\ customers\ of\ Victoria\ Airlines\ <br><i>pre-condition\:\ </i>\r\n\ customer\ may\ not\ be\ <code>null</code>\r\n
comment12.params=flight
comment12.target=void\ setFlights(Flight[])
comment12.text=\r\n\ Sets\ the\ flights\ record\ of\ this\ operations\ office.\r\n\r\n\ @param\ flight\ the\ array\ which\ contains\ the\ information\ for\ flights\ \r\n\ of\ Victoria\ Airlines<br><i>pre-condition\:\ </i>\r\n\ flight\ may\ not\ be\ <code>null</code>\r\n
comment13.params=plane
comment13.target=void\ setPlanes(Plane[])
comment13.text=\r\n\ Sets\ the\ planes\ record\ of\ this\ operations\ office.\r\n\r\n\ @param\ plane\ the\ array\ which\ contains\ the\ information\ for\ flights\ of\ \r\n\ Victoria\ Airlines\ <br><i>pre-condition\:\ </i>\r\n\ plane\ may\ not\ be\ <code>null</code>\r\n
comment14.params=flight
comment14.target=boolean\ addFlight(Flight)
comment14.text=\r\n\ Adds\ a\ flight\ to\ the\ record\ of\ this\ operations\ office\r\n\ if\ there\ is\ space\ for\ the\ flight.\r\n\ \r\n\ @param\ flight\ the\ flight\ to\ be\ added\ <br><i>pre-condition\:\ </i>\r\n\ flight\ may\ not\ be\ <code>null</code>\r\n\ \r\n\ @return\ whether\ the\ operation\ was\ successful\r\n
comment15.params=plane
comment15.target=boolean\ addPlane(Plane)
comment15.text=\r\n\ Adds\ a\ plane\ to\ the\ record\ of\ this\ operations\ office.\r\n\r\n\ @param\ plane\ the\ plane\ to\ be\ added\ <br><i>pre-condition\:\ </i>\r\n\ plane\ may\ not\ be\ <code>null</code>\r\n\ \r\n\ @return\ whether\ the\ operation\ was\ successful\r\n
comment16.params=passenger
comment16.target=boolean\ addCustomer(Passenger)
comment16.text=\r\n\ Adds\ a\ passenger\ to\ the\ customer\ database\ \r\n\ of\ this\ operation\ office,\ if\ they\ aren't\ \r\n\ already\ registerd.\r\n\ \r\n\ @param\ passenger\ the\ passenger\ to\ be\ added\r\n\ <br><i>pre-condition\:\ </i>\r\n\ passenger\ may\ not\ be\ <code>null</code>\r\n\ \r\n\ @return\ whether\ the\ operation\ was\ successful\r\n
comment17.params=flight
comment17.target=boolean\ removeFlight(Flight)
comment17.text=\r\n\ Removes\ a\ flight\ to\ the\ record\ of\ this\ operations\ office.\r\n\ <br><i>pre-condition\:\ </i>\ flight\ may\ not\ be\ <code>null</code>\r\n\r\n\ @param\ flight\ the\ flight\ to\ be\ removed\r\n\ \r\n\ @return\ whether\ the\ operation\ was\ successful\r\n
comment18.params=indexOfFlight
comment18.target=boolean\ removeFlightByIndex(int)
comment18.text=\r\n\ Removes\ a\ flight\ by\ its\ index\ to\ the\ record\ of\ this\ operations\ office.\r\n\r\n\ @param\ indexOfFlight\ the\ index\ of\ the\ flight\ to\ be\ removed\r\n\ <br><i>pre-condition\:\ </i>\ indexOfFlight\ \r\n\ must\ be\ greater\ than\ 0\ and\ less\ than\ number\ of\ flights\ \r\n\ \r\n\ @return\ whether\ the\ flight\ was\ successful\r\n
comment19.params=plane
comment19.target=boolean\ removePlane(Plane)
comment19.text=\r\n\ Removes\ a\ plane\ from\ the\ record\ of\ this\ operations\ office.\r\n\r\n\ @param\ plane\ the\ plane\ to\ be\ removed\r\n\ <br><i>pre-condition\:\ </i>\ plane\ may\ not\ be\ <code>null</code>\r\n\ \r\n\ @return\ whether\ the\ operation\ was\ successful\r\n
comment2.params=prompt
comment2.target=java.lang.String\ getString(java.lang.String)
comment2.text=\r\n\ Returns\ a\ string\ obtained\ from\ the\ console,\ after\ the\ user\ \r\n\ had\ been\ given\ the\ specified\ prompt.\r\n\ \r\n\ @param\ prompt\ the\ information\ to\ give\ the\ user\ before\ \r\n\ asking\ them\ for\ a\ value\r\n\ \r\n\ @return\ the\ user\ input,\ empty\ string\ the\ method\ could\ not\ get\ input\r\n
comment20.params=indexOfPlane
comment20.target=boolean\ removePlaneByIndex(int)
comment20.text=\r\n\ Removes\ a\ plane\ by\ its\ index\ to\ the\ record\ of\ this\ operations\ office.\r\n\r\n\ @param\ indexOfPlane\ the\ index\ of\ the\ plane\ to\ be\ removed\r\n\ <br><i>pre-condition\:\ </i>\ indexOfPlane\ must\ be\ greater\ than\r\n\ 0\ and\ less\ than\ number\ of\ planes\ in\ the\ record.\r\n\ \r\n\ @return\ whether\ the\ plane\ was\ successfully\ removed\r\n
comment21.params=passenger
comment21.target=boolean\ removePassenger(Passenger)
comment21.text=\r\n\ Removes\ a\ passenger\ to\ the\ record\ of\ this\ operations\ office.\r\n\r\n\ @param\ passenger\ the\ passenger\ to\ be\ removed\r\n\ <br><i>pre-condition\:\ </i>\ passenger\ may\ not\r\n\ be\ <code>null</code>\r\n\ \r\n\ @return\ whether\ the\ operation\ was\ successful\r\n
comment22.params=indexOfPassenger
comment22.target=boolean\ removePassengerByIndex(int)
comment22.text=\r\n\ Removes\ a\ passenger\ by\ its\ index\ from\ this\ operations\ office.\r\n\r\n\ @param\ indexOfPassenger\ the\ index\ of\ the\ passenger\ to\ be\ removed\r\n\ <br><i>pre-condition\:\ </i>\ indexOfPassenger\ must\ be\ greater\ than\ 0\r\n\ and\ less\ than\ the\ number\ of\ passengers\r\n\ \r\n\ @return\ whether\ the\ passenger\ was\ successfully\ removed\r\n
comment23.params=textFile
comment23.target=Plane[]\ loadPlaneData(java.lang.String)
comment23.text=\r\n\ Reads\ plane\ data\ from\ the\ specified\ text\ file\ and\ \r\n\ creates\ a\ plane\ database\ for\ this\ operation\ office.\r\n\ \r\n\ @param\ textFile\ the\ name\ of\ the\ textFile\ <br><i>textFile\ \r\n\ may\ not\ be\ null</i>\r\n\ @return\ an\ array\ of\ the\ planes\ created\ from\ data\ found\ \r\n\ in\ the\ specified\ text\ file\r\n
comment24.params=textFile
comment24.target=Passenger[]\ loadCustomerData(java.lang.String)
comment24.text=\r\n\ Reads\ passenger\ data\ from\ the\ specified\ text\ file\ and\ \r\n\ creates\ a\ customer\ database\ for\ this\ operation\ office.\r\n\ \r\n\ @param\ textFile\ the\ name\ of\ the\ textFile\ <br><i>textFile\ \r\n\ may\ not\ be\ null</i>\r\n\ @return\ an\ array\ of\ the\ passengers\ created\ from\ data\ found\ \r\n\ in\ the\ specified\ text\ file\r\n
comment25.params=textFile
comment25.target=Flight[]\ loadFlightData(java.lang.String)
comment25.text=\r\n\ Reads\ flight\ data\ from\ a\ text\ file\ and\ creates\r\n\ a\ flight\ database\ for\ this\ operations\ office.\r\n\ \r\n\ @param\ textFile\ the\ file\ to\ be\ read\ from\ <br><i>\r\n\ pre-condition\:\ </i>\ textfile\ may\ not\ be\ \r\n\ <code>null</code>\r\n
comment26.params=
comment26.target=void\ boardPassengers()
comment26.text=\r\n\ Adds\ existing\ passengers\ and\ their\ cargo\ in\ the\ database\r\n\ to\ their\ corresponding\ flights,\ to\ ensure\ that\r\n\ no\ two\ same\ seats\ are\ reserved\ when\ booking\ a\ flight.\r\n\ \r\n
comment27.params=customerFile\ planeFile\ flightFile
comment27.target=void\ loadDatabases(java.lang.String,\ java.lang.String,\ java.lang.String)
comment27.text=\r\n\ Reads\ flight,\ passenger\ and\ plane\ data\ from\ \r\n\ specified\ text\ files\ and\ intializes\ \r\n\ the\ databases\ of\ this\ operations\ office,\ ensuring\r\n\ that\ all\ passengers\ have\ been\ added\ to\ their\ flight.\r\n\ \r\n\ @param\ customerFile\ the\ text\ file\ containing\ the\r\n\ customer\ data\ <br><i>pre-condition\:\ </i>\ \r\n\ customerFile\ may\ not\ be\ <code>null</code>\r\n\ @param\ planeFile\ the\ text\ file\ containing\ the\r\n\ plane\ data.<br><i>pre-condition\:\ </i>\ planeFile\ \r\n\ may\ not\ be\ <code>null</code>\r\n\ @param\ flightFile\ the\ textfile\ containing\ the\ \r\n\ flight\ data<br><i>pre-condition\:\ </i>\ flightFile\ \r\n\ may\ not\ be\ <code>null</code>\r\n
comment28.params=textFile
comment28.target=void\ saveCustomerData(java.lang.String)
comment28.text=\r\n\ Saves\ the\ customer\ data\ of\ this\ operations\ office\r\n\ to\ the\ specified\ file.\r\n\ \r\n\ @param\ textFile\ the\ file\ to\ which\ the\ data\ will\ be\r\n\ saved\ to.\ <br><i>pre-condition\:\ </i>\ textFile\ may\r\n\ not\ be\ <code>null</code>\r\n
comment29.params=textFile
comment29.target=void\ savePlaneData(java.lang.String)
comment29.text=\ \r\n\ Saves\ the\ plane\ data\ of\ this\ operations\ office\ \r\n\ to\ the\ specified\ file.\r\n\ \r\n\ @param\ textFile\ the\ file\ to\ which\ the\ data\ will\ be\r\n\ saved\ to.\ <br><i>pre-condition\:\ </i>\ textFile\ may\r\n\ not\ be\ <code>null</code>\r\n
comment3.params=prompt
comment3.target=int\ getInt(java.lang.String)
comment3.text=\r\n\ Returns\ an\ integer\ obtained\ from\ the\ console,\ after\ the\ \r\n\ user\ had\ been\ given\ the\ specified\ prompt.\r\n\ \r\n\ @param\ prompt\ the\ information\ to\ give\ the\ user\ \r\n\ before\ asking\ them\ for\ a\ value\r\n\ \r\n\ @return\ the\ user\ integer\ input\r\n
comment30.params=textFile
comment30.target=void\ saveFlightData(java.lang.String)
comment30.text=\r\n\ Saves\ the\ flight\ data\ of\ this\ operations\ office\r\n\ to\ the\ specified\ file.\r\n\ \r\n\ @param\ textFile\ the\ file\ to\ which\ the\ data\ will\ be\r\n\ saved\ to.\ <br><i>pre-condition\:\ </i>\ textFile\ may\r\n\ not\ be\ <code>null</code>\r\n
comment31.params=flightName\ cost\ date\ destination\ departure
comment31.target=Flight\ scheduleFlight(java.lang.String,\ double,\ java.lang.String,\ java.lang.String,\ java.lang.String)
comment31.text=\r\n\ Schedules\ a\ flight\ from\ the\ specified\ departure\r\n\ to\ destination\ at\ the\ specifed\ date\ with\ the\ \r\n\ specified\ cost\ if\ an\ unscheduled\ plane\ matching\ \r\n\ it's\ range\ and\ departure\ is\ found.\r\n\ \r\n\ @param\ flightName\ the\ name\ of\ this\ flight\ <br>\r\n\ <i>pre-condition\:\ </i>\ flightName\ may\ not\ be\ \r\n\ <code>null</code>\r\n\ @param\ cost\ the\ cost\ of\ this\ flight\ <br><i>\r\n\ pre-condition</i>\ cost\ cannot\ be\ negative\r\n\ @param\ date\ the\ takeoff\ date\ of\ this\ flight\r\n\ <br><i>pre-condition\:\ </i>\ date\ may\ not\ be\ \r\n\ <code>null</code>\r\n\ @param\ destination\ the\ destination\ of\ this\ flight\r\n\ <br><i>pre-condition\:\ </i>\ destination\ may\ not\ be\ \r\n\ <code>null</code>\r\n\ @param\ departure\ the\ departure\ of\ this\ flight\r\n\ <br><i>pre-condition\:\ </i>\ departure\ may\ not\ be\ \r\n\ <code>null</code>\r\n\ @return\ the\ scheduled\ flight,\ if\ required\ plane\ is\ \r\n\ present\ otherwise\ <code>null</code>\r\n\ \r\n
comment32.params=departure\ destination
comment32.target=double\ calculateDistanceKm(Location,\ Location)
comment33.params=passenger\ departure\ destination
comment33.target=Ticket\ createTicket(Passenger,\ java.lang.String,\ java.lang.String)
comment33.text=\r\n\ Creates\ a\ ticket\ for\ flight\ with\ the\ specified\ departure\ and\ destination\r\n\ for\ the\ specified\ passenger\ if\ such\ a\ flight\ exists\ in\ \r\n\ this\ operation\ office\ flight\ database.\r\n\ \r\n\ @param\ passenger\ the\ passenger\ to\ make\ the\ ticket\ for\r\n\ <br><i>pre-condition\:\ </i>\ passenger\ may\ not\ be\ <code>null</code>\r\n\ @param\ departure\ the\ departure\ of\ the\ passenger's\ trip\ <b><i>\r\n\ pre-condition\:\ </i>\ departure\ may\ not\ <code>null</code>\r\n\ @param\ destination\ the\ destination\ of\ the\ passenger's\ trip\r\n\ <b><i>pre-condition\:\ </i>\ destination\ may\ not\ <code>null</code>\r\n\ \r\n\ @return\ the\ ticket\ made\ to\ reserve\ the\ passenger's\ seat\r\n
comment34.params=passenger
comment34.target=int\ rewardPoints(Passenger)
comment34.text=\r\n\ Rewards\ passengers\ who\ are\ in\ this\ operation\ office's\ \r\n\ database\ with\ frequent\ flyer\ points\ in\ accordance\ to\ \r\n\ their\ flight\ cost.\r\n\ \r\n\ @param\ passenger\ the\ passenger\ to\ be\ rewarded\ points\r\n\ <br><i>pre-condition\:\ </i>\ passenger\ may\ not\ be\ \r\n\ <code>null</code>\r\n
comment35.params=passenger
comment35.target=boolean\ isRegistered(Passenger)
comment35.text=\r\n\ Method\ to\ check\ if\ a\ passenger\ is\ already\ in\ the\ database\r\n
comment36.params=locationName
comment36.target=boolean\ isValidLocation(java.lang.String)
comment36.text=\r\n\ Method\ to\ check\ if\ the\ entered\ location\ is\ one\r\n\ Victoria\ Airlines\ serves\r\n
comment37.params=
comment37.target=void\ displayFlights()
comment37.text=\r\n\ Displays\ the\ flights\ of\ this\ operations\r\n\ office.\r\n
comment38.params=
comment38.target=void\ displayPlanes()
comment38.text=\r\n\ Displays\ the\ planes\ of\ this\ operations\r\n\ office.\r\n
comment39.params=
comment39.target=void\ displayCustomers()
comment39.text=\r\n\ Displays\ the\ customers\ of\ this\ operations\r\n\ office.\r\n
comment4.params=prompt
comment4.target=double\ getDouble(java.lang.String)
comment4.text=\r\n\ Returns\ a\ double\ obtained\ from\ the\ console,\ after\ the\ user\ had\ \r\n\ been\ given\ the\ specified\ prompt.\r\n\ \r\n\ @param\ prompt\ the\ information\ to\ give\ the\ user\ before\ \r\n\ asking\ them\ for\ a\ value\r\n\ \r\n\ @return\ the\ user\ double\ input\r\n
comment5.params=prompt
comment5.target=boolean\ getBoolean(java.lang.String)
comment5.text=\r\n\ Returns\ a\ boolean\ integer\ obtained\ from\ the\ console,\ after\ \r\n\ the\ user\ had\ been\ given\ the\ specified\ prompt.\r\n\ \r\n\ @param\ prompt\ the\ information\ to\ give\ the\ user\ before\ \r\n\ asking\ them\ for\ a\ value\r\n\ \r\n\ @return\ the\ user\ boolean\ input\ \r\n
comment6.params=input\ operationsOffice
comment6.target=void\ handleInput(java.lang.String,\ OperationsOffice)
comment6.text=\r\n\ Handles\ the\ commands\ executed\ based\ on\ user\ input.\r\n\ \r\n\ @param\ input\ the\ input\ to\ handle\r\n\ @param\ operationsOffice\ the\ operations\ office\ \r\n
comment7.params=maximumNumberOfCustomers\ maximumNumberOfFlights\ maximumNumberOfPlanes
comment7.target=OperationsOffice(int,\ int,\ int)
comment7.text=\r\n\ Constructs\ an\ operations\ office\ with\ the\ specified\ information.\r\n\ \r\n\ @param\ maximumNumberOfFlights\ the\ maximum\ number\ of\ \r\n\ flights\ this\ operations\ office\ can\ store\ <br><i>pre-condition\:\ </i>\r\n\ maximumNumberOfFlights\ must\ be\ greater\ than\ 0\r\n\ @param\ maximumNumberOfPlanes\ the\ maximum\ number\ of\ \r\n\ planes\ this\ operations\ office\ can\ store\ <br><i>pre-condition\:\ </i>\r\n\ maximumNumberOfPlanes\ must\ be\ greater\ than\ 0\r\n\ @param\ maximumNumberOfCustomers\ the\ maximum\ number\ of\ \r\n\ customers\ this\ operations\ office\ can\ store\ <br><i>pre-condition\:\ </i>\r\n\ maximumNumberOfCustomers\ must\ be\ greater\ than\ 0\r\n
comment8.params=
comment8.target=Passenger[]\ getCustomers()
comment8.text=\r\n\ Returns\ the\ record\ of\ all\ customers\ in\ this\ operations\ office.\r\n\r\n\ @return\ the\ record\ of\ all\ customers\ in\ this\ operations\ office\r\n
comment9.params=
comment9.target=Flight[]\ getFlights()
comment9.text=\r\n\ Returns\ the\ record\ of\ all\ flights\ in\ this\ operations\ office.\r\n\r\n\ @return\ the\ record\ of\ all\ flights\ in\ this\ operations\ office\r\n
numComments=40
