#BlueJ class context
comment0.params=argument
comment0.target=void\ main(java.lang.String[])
comment0.text=\r\n\ The\ CLI\ for\ Victoria\ Airlines\ operations\ office.\r\n
comment1.params=
comment1.target=void\ help()
comment1.text=\r\n\ Prints\ all\ the\ possible\ commands\ this\ CLI\ can\ handle.\r\n
comment10.params=
comment10.target=Plane[]\ getPlanes()
comment10.text=\r\n\ Returns\ the\ record\ of\ all\ planes\ in\ this\ operations\ office.\r\n\r\n\ @return\ the\ record\ of\ all\ planes\ in\ this\ operations\ office\r\n
comment11.params=customer
comment11.target=void\ setCustomers(Passenger[])
comment11.text=\r\n\ Sets\ the\ customers\ record\ of\ this\ operations\ office.\r\n\r\n\ @param\ customer\ the\ array\ which\ contains\ the\ information\ for\ \r\n\ customers\ of\ Victoria\ Airlines\r\n
comment12.params=flight
comment12.target=void\ setFlights(Flight[])
comment12.text=\r\n\ Sets\ the\ flights\ record\ of\ this\ operations\ office.\r\n\r\n\ @param\ flight\ the\ array\ which\ contains\ the\ information\ for\ flights\ \r\n\ of\ Victoria\ Airlines\r\n
comment13.params=plane
comment13.target=void\ setPlanes(Plane[])
comment13.text=\r\n\ Sets\ the\ planes\ record\ of\ this\ operations\ office.\r\n\r\n\ @param\ plane\ the\ array\ which\ contains\ the\ information\ for\ flights\ of\ \r\n\ Victoria\ Airlines\r\n
comment14.params=flight
comment14.target=boolean\ addFlight(Flight)
comment14.text=\r\n\ Adds\ a\ flight\ to\ the\ record\ of\ this\ operations\ office.\r\n\r\n\ @param\ flight\ the\ flight\ to\ be\ added\r\n\ \r\n\ @return\ whether\ the\ operation\ was\ successful\r\n
comment15.params=plane
comment15.target=boolean\ addPlane(Plane)
comment15.text=\r\n\ Adds\ a\ plane\ to\ the\ record\ of\ this\ operations\ office.\r\n\r\n\ @param\ plane\ the\ plane\ to\ be\ added\r\n\ \r\n\ @return\ whether\ the\ operation\ was\ successful\r\n
comment16.params=passenger
comment16.target=boolean\ addCustomer(Passenger)
comment16.text=\r\n\ Adds\ a\ passenger\ to\ the\ customer\ database\ \r\n\ of\ this\ operation\ office.\r\n\ \r\n\ @param\ passenger\ the\ passenger\ to\ be\ added\r\n\ \r\n\ @return\ whether\ the\ operation\ was\ successful\r\n
comment17.params=flight
comment17.target=boolean\ removeFlight(Flight)
comment17.text=\r\n\ Removes\ a\ flight\ to\ the\ record\ of\ this\ operations\ office.\r\n\r\n\ @param\ flight\ the\ flight\ to\ be\ removed\r\n\ \r\n\ @return\ whether\ the\ operation\ was\ successful\r\n
comment18.params=indexOfFlight
comment18.target=boolean\ removeFlightByIndex(int)
comment18.text=\r\n\ Removes\ a\ flight\ by\ its\ index\ to\ the\ record\ of\ this\ operations\ office.\r\n\r\n\ @param\ indexOfFlight\ the\ index\ of\ the\ flight\ to\ be\ removed\r\n\ \r\n\ @return\ whether\ the\ flight\ was\ successful\r\n
comment19.params=textFile
comment19.target=Plane[]\ loadPlaneData(java.lang.String)
comment19.text=\r\n\ Reads\ plane\ data\ from\ the\ specified\ text\ file\ and\ \r\n\ creates\ a\ plane\ database\ for\ this\ operation\ office.\r\n\ \r\n\ @param\ textFile\ the\ name\ of\ the\ textFile\ <br><i>textFile\ \r\n\ may\ not\ be\ null</i>\r\n\ @return\ an\ array\ of\ the\ planes\ created\ from\ data\ found\ \r\n\ in\ the\ specified\ text\ file\r\n
comment2.params=prompt
comment2.target=java.lang.String\ getString(java.lang.String)
comment2.text=\r\n\ Returns\ a\ string\ obtained\ from\ the\ console,\ after\ the\ user\ had\ been\ given\ the\ specified\ prompt.\r\n\ \r\n\ @param\ prompt\ the\ information\ to\ give\ the\ user\ before\ asking\ them\ for\ a\ value\r\n\ \r\n\ @return\ the\ user\ input,\ empty\ string\ the\ method\ could\ not\ get\ input\r\n
comment20.params=textFile
comment20.target=Passenger[]\ loadPassengerData(java.lang.String)
comment20.text=\r\n\ Reads\ passenger\ data\ from\ the\ specified\ text\ file\ and\ \r\n\ creates\ a\ customer\ database\ for\ this\ operation\ office.\r\n\ \r\n\ @param\ textFile\ the\ name\ of\ the\ textFile\ <br><i>textFile\ \r\n\ may\ not\ be\ null</i>\r\n\ @return\ an\ array\ of\ the\ passengers\ created\ from\ data\ found\ \r\n\ in\ the\ specified\ text\ file\r\n
comment21.params=flightName\ cost\ date\ destination\ departure
comment21.target=Flight\ scheduleFlight(java.lang.String,\ double,\ java.lang.String,\ java.lang.String,\ java.lang.String)
comment21.text=\r\n\ Schedules\ a\ flight\ from\ the\ specified\ departure\r\n\ to\ destination\ at\ the\ specifed\ date\ with\ the\ \r\n\ specified\ cost.\r\n\ \r\n\ @param\ flightName\ the\ name\ of\ this\ flight\ <br>\r\n\ <i>pre-condition\:\ </i>\ flightName\ may\ not\ be\ \r\n\ <code>null</code>\r\n\ @param\ cost\ the\ cost\ of\ this\ flight\ <br><i>\r\n\ pre-condition</i>\ cost\ cannot\ be\ negative\r\n\ @param\ date\ the\ takeoff\ date\ of\ this\ flight\r\n\ <br><i>pre-condition\:\ </i>\ date\ may\ not\ be\ \r\n\ <code>null</code>\r\n\ @param\ destination\ the\ destination\ of\ this\ flight\r\n\ <br><i>pre-condition\:\ </i>\ destination\ may\ not\ be\ \r\n\ <code>null</code>\r\n\ @param\ departure\ the\ departure\ of\ this\ flight\r\n\ <br><i>pre-condition\:\ </i>\ departure\ may\ not\ be\ \r\n\ <code>null</code>\r\n\ @return\ the\ scheduled\ flight,\ if\ required\ plane\ is\ \r\n\ present\ otherwise\ <code>null</code>\r\n\ \r\n
comment22.params=departure\ destination
comment22.target=double\ calculateDistanceKm(Location,\ Location)
comment23.params=passenger\ departure\ destination
comment23.target=boolean\ addReservation(Passenger,\ java.lang.String,\ java.lang.String)
comment23.text=\r\n\ Creates\ a\ ticket\ for\ flight\ with\ the\ specified\ departure\ and\ destination\r\n\ for\ the\ specified\ passenger\ and\ reserves\ their\ seat,\r\n\ if\ such\ a\ flight\ exists\ in\ the\ operation\ office\ flight\ database.\r\n\ \r\n\ @param\ passenger\ the\ passenger\ to\ be\ booked\ into\ a\ flight\r\n\ <br><i>pre-condition\:\ </i>\ passenger\ may\ not\ be\ <code>null</code>\r\n\ @param\ departure\ the\ departure\ of\ the\ passenger's\ trip\ <b><i>\r\n\ pre-condition\:\ </i>\ departure\ may\ not\ <code>null</code>\r\n\ @param\ destination\ the\ destination\ of\ the\ passenger's\ trip\r\n\ <b><i>pre-condition\:\ </i>\ destination\ may\ not\ <code>null</code>\r\n\ \r\n\ @return\ <code>true</code>\ if\ the\ reservation\ was\ made\ \r\n\ sucessfully\ otherwise\ <code>false</code>\r\n
comment24.params=passenger
comment24.target=void\ rewardPoints(Passenger)
comment24.text=\r\n\ Rewards\ passengers\ who\ are\ in\ this\ operation\ office's\ \r\n\ database\ with\ frequent\ flyer\ points\ in\ accordance\ to\ \r\n\ their\ flight\ cost.\r\n\ \r\n\ @param\ passenger\ the\ passenger\ to\ be\ rewarded\ points\r\n\ <br><i>pre-condition\:\ </i>\ passenger\ may\ not\ be\ \r\n\ <code>null</code>\r\n
comment25.params=passenger\ passengerDatabase
comment25.target=boolean\ isRegistered(Passenger,\ Passenger[])
comment3.params=prompt
comment3.target=int\ getInt(java.lang.String)
comment3.text=\r\n\ Returns\ an\ integer\ obtained\ from\ the\ console,\ after\ the\ user\ had\ been\ given\ the\ specified\ prompt.\r\n\ \r\n\ @param\ prompt\ the\ information\ to\ give\ the\ user\ before\ asking\ them\ for\ a\ value\r\n\ \r\n\ @return\ the\ user\ integer\ input\r\n
comment4.params=prompt
comment4.target=double\ getDouble(java.lang.String)
comment4.text=\r\n\ Returns\ a\ double\ obtained\ from\ the\ console,\ after\ the\ user\ had\ been\ given\ the\ specified\ prompt.\r\n\ \r\n\ @param\ prompt\ the\ information\ to\ give\ the\ user\ before\ asking\ them\ for\ a\ value\r\n\ \r\n\ @return\ the\ user\ double\ input\r\n
comment5.params=prompt
comment5.target=boolean\ getBoolean(java.lang.String)
comment5.text=\r\n\ Returns\ a\ boolean\ integer\ obtained\ from\ the\ console,\ after\ the\ user\ had\ been\ given\ the\ specified\ prompt.\r\n\ \r\n\ @param\ prompt\ the\ information\ to\ give\ the\ user\ before\ asking\ them\ for\ a\ value\r\n\ \r\n\ @return\ the\ user\ boolean\ input\ false\ if\ the\ input\ was\ invalid\r\n
comment6.params=input\ operationsOffice
comment6.target=void\ handleInput(java.lang.String,\ OperationsOffice)
comment6.text=\r\n\ Handles\ the\ commands\ executed\ based\ on\ user\ input.\r\n\ \r\n\ @param\ input\ the\ input\ to\ handle\r\n\ @param\ operationsOffice\ the\ operations\ office\ \r\n
comment7.params=maximumNumberOfCustomers\ maximumNumberOfFlights\ maximumNumberOfPlanes
comment7.target=OperationsOffice(int,\ int,\ int)
comment7.text=\r\n\ Constructs\ an\ operations\ office\ with\ the\ specified\ information.\r\n\ \r\n\ @param\ maximumNumberOfFlights\ the\ maximum\ number\ of\ \r\n\ flights\ this\ operations\ office\ can\ store\r\n\ @param\ maximumNumberOfPlanes\ the\ maximum\ number\ of\ \r\n\ planes\ this\ operations\ office\ can\ store\r\n\ @param\ maximumNumberOfCustomers\ the\ maximum\ number\ of\ \r\n\ customers\ this\ operations\ office\ can\ store\r\n
comment8.params=
comment8.target=Passenger[]\ getCustomers()
comment8.text=\r\n\ Returns\ the\ record\ of\ all\ customers\ in\ this\ operations\ office.\r\n\r\n\ @return\ the\ record\ of\ all\ customers\ in\ this\ operations\ office\r\n
comment9.params=
comment9.target=Flight[]\ getFlights()
comment9.text=\r\n\ Returns\ the\ record\ of\ all\ flights\ in\ this\ operations\ office.\r\n\r\n\ @return\ the\ record\ of\ all\ flights\ in\ this\ operations\ office\r\n
numComments=26
